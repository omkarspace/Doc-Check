"""Update batch and document models

Revision ID: ac0427bdaa86
Revises: 78f6152a3136
Create Date: 2025-05-19 13:04:34.453984

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ac0427bdaa86'
down_revision: Union[str, None] = '78f6152a3136'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('batches', schema=None) as batch_op:
        batch_op.add_column(sa.Column('file_path', sa.String(length=512), nullable=False))
        batch_op.add_column(sa.Column('document_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('processed_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('failed_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('metadata', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('started_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('completed_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(CURRENT_TIMESTAMP)'),
               nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=sa.DATETIME(),
               server_default=sa.text('(CURRENT_TIMESTAMP)'),
               nullable=False)
        # For SQLite, we need to create a new table and copy the data
    op.execute('PRAGMA foreign_keys=OFF')
    
    # Create a temporary table with the new schema
    op.create_table(
        'batches_new',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.Enum('pending', 'processing', 'completed', 'failed', name='batchstatus'), nullable=False),
        sa.Column('document_type', sa.String(length=50), nullable=False),
        sa.Column('file_path', sa.String(length=512), nullable=False),
        sa.Column('document_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('processed_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('failed_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('metadata', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('owner_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Copy data from old table to new table
    op.execute('''
        INSERT INTO batches_new (
            id, name, description, status, document_type, file_path, document_count, 
            processed_count, failed_count, metadata, created_at, updated_at, started_at, 
            completed_at, owner_id
        )
        SELECT 
            id, name, description, status, document_type, 
            '', 0, 0, 0, NULL, 
            created_at, updated_at, NULL, NULL, owner_id
        FROM batches
    ''')
    
    # Drop the old table and rename the new one
    op.drop_table('batches')
    op.rename_table('batches_new', 'batches')
    
    # Re-enable foreign keys
    op.execute('PRAGMA foreign_keys=ON')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('batches', schema=None) as batch_op:
        # Disable foreign keys temporarily
        batch_op.execute('PRAGMA foreign_keys=OFF')
        
        # Create a temporary table with the old schema
        batch_op.create_table(
            'batches_old',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('description', sa.String(), nullable=True),
            sa.Column('status', sa.String(length=10), nullable=True),
            sa.Column('document_type', sa.String(length=50), nullable=False),
            sa.Column('total_documents', sa.Integer(), nullable=True, server_default='0'),
            sa.Column('processed_documents', sa.Integer(), nullable=True, server_default='0'),
            sa.Column('success_count', sa.Integer(), nullable=True, server_default='0'),
            sa.Column('error_count', sa.Integer(), nullable=True, server_default='0'),
            sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
            sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
            sa.Column('owner_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['owner_id'], ['users.id']),
            sa.PrimaryKeyConstraint('id')
        )
        
        # Copy data from current table to old table
        batch_op.execute('''
            INSERT INTO batches_old (
                id, name, description, status, document_type, 
                total_documents, processed_documents, success_count, 
                error_count, created_at, updated_at, owner_id
            )
            SELECT 
                id, name, description, status, document_type, 
                document_count, processed_count, 0, 
                failed_count, created_at, updated_at, owner_id
            FROM batches
        ''')
        
        # Drop the current table and rename the old one
        batch_op.drop_table('batches')
        batch_op.rename_table('batches_old', 'batches')
        
        # Re-enable foreign keys
        batch_op.execute('PRAGMA foreign_keys=ON')

    # ### end Alembic commands ###
